function generateScriptIncludes(projectName)
    local output = "// Autogenerated by Premake\n#pragma once\n\n"
    local scriptDir = projectName .. "/src/Scripts/"
    local internalDir = projectName .. "/src/_internal/"
    local customizablesDir = internalDir .. "customizables/"
    local outputDir = projectName .. "/src/_internal/_generated/"
    local outputFile = outputDir .. "ScriptIncludes.gen.h"

    local internalFiles = os.matchfiles(internalDir .. "*.h")
    local customizablesFiles = os.matchfiles(customizablesDir .. "**.h")
    local scriptFiles = os.matchfiles(scriptDir .. "**.h")

    local allFiles = {}
    for _, f in ipairs(scriptFiles) do table.insert(allFiles, f) end
    for _, f in ipairs(internalFiles) do table.insert(allFiles, f) end
    for _, f in ipairs(customizablesFiles) do table.insert(allFiles, f) end

    table.sort(allFiles)

    for _, file in ipairs(allFiles) do
        local relativePath = path.getrelative(projectName .. "/src", file)
        output = output .. "#include \"" .. relativePath .. "\"\n"
    end

    os.mkdir(outputDir)
    local f = io.open(outputFile, "w")
    assert(f, "Couldn't open file to write ScriptIncludes.gen.h")
    f:write(output)
    f:close()
end

----------------------------------------------------------
-- Workspace & Engine
----------------------------------------------------------

workspace "Flux"
    architecture "x64"

    configurations
    {
        "Debug",
        "Release",
        "Dist"
    }

outputdir = "%{cfg.buildcfg}-%{cfg.system}-%{cfg.architecture}"

project "Flux"
    location "Flux"
    kind "SharedLib"
    language "C++"

    targetdir ("bin/" .. outputdir .. "/%{prj.name}")
    objdir ("bin-int/" .. outputdir .. "/%{prj.name}")

    pchheader "fxpch.h"
    pchsource "Flux/src/fxpch.cpp"

    files
    {
        "%{prj.name}/src/**.h",
        "%{prj.name}/src/**.cpp",

        "%{prj.name}/vendor/imgui/*.h",
        "%{prj.name}/vendor/imgui/*.cpp",

        "%{prj.name}/vendor/imgui/backends/imgui_impl_glfw.cpp",
        "%{prj.name}/vendor/imgui/backends/imgui_impl_glfw.h",
        "%{prj.name}/vendor/imgui/backends/imgui_impl_opengl3.cpp",
        "%{prj.name}/vendor/imgui/backends/imgui_impl_opengl3.h"
    }

    filter { "files:**/vendor/imgui/**.cpp" }
        flags { "NoPCH" }
    filter {}

    includedirs
    {
        "%{prj.name}/src",
        "%{prj.name}/vendor/spdlog/include",
        "%{prj.name}/vendor/GLFW/include",
        "%{prj.name}/vendor/GLEW/include",
        "%{prj.name}/vendor/imgui",
        "%{prj.name}/vendor/imgui/backends",
        "%{prj.name}/vendor/stb"
    }

    libdirs 
    {
        "%{prj.name}/vendor/GLFW/lib-vc2022",
        "%{prj.name}/vendor/GLEW/lib"
    }

    links 
    {
        "glfw3_mt",
        "glew32s.lib",
        "opengl32.lib"
    }

    filter "system:windows"
        cppdialect "C++17"
        staticruntime "Off"
        systemversion "latest"
        buildoptions { "/utf-8" }

        defines
        {
            "FX_PLATFORM_WINDOWS",
            "FX_BUILD_DLL",
            "GLFW_STATIC",
            "GLEW_STATIC",
            "GLFW_INCLUDE_NONE",
            "IMGUI_IMPL_OPENGL_LOADER_GLEW"
        }

        postbuildcommands
        {
            '{MKDIR} "../bin/' .. outputdir .. '/@venture/"',
            '{COPYFILE} "%{cfg.buildtarget.relpath}" "../bin/' .. outputdir .. '/@venture/"',
            '{MKDIR} "../bin/' .. outputdir .. '/@venture/src/"',
            '{COPYDIR} "../@venture/src/res" "../bin/' .. outputdir .. '/@venture/src/res"',
        }

    filter "configurations:Debug"
        defines "FX_DEBUG"
        symbols "On"
    filter "configurations:Release"
        defines "FX_RELEASE"
        optimize "On"
    filter "configurations:Dist"
        defines "FX_DIST"
        optimize "On"

----------------------------------------------------------
-- First Game
----------------------------------------------------------

project "@venture"
    location "@venture"
    kind "ConsoleApp"
    language "C++"

    targetdir ("bin/" .. outputdir .. "/%{prj.name}")
    objdir ("bin-int/" .. outputdir .. "/%{prj.name}")

    files
    {
        "%{prj.name}/src/**.h",
        "%{prj.name}/src/**.cpp",
        "%{prj.name}/src/_internal/_generated/ScriptIncludes.gen.h"
    }

    includedirs
    {
        "Flux/vendor/spdlog/include",
        "Flux/vendor/GLFW/include",
        "Flux/vendor/GLEW/include",
        "Flux/src",
        "%{prj.name}/src",
        "Flux/vendor/stb"
    }

    filter "system:windows"
        cppdialect "C++17"
        staticruntime "Off"
        systemversion "latest"
        buildoptions { "/utf-8" }

        defines { "FX_PLATFORM_WINDOWS" }
        links { "Flux" }

    filter "configurations:Debug"
        defines "FX_DEBUG"
        symbols "On"
    filter "configurations:Release"
        defines "FX_RELEASE"
        optimize "On"
    filter "configurations:Dist"
        defines "FX_DIST"
        optimize "On"

    generateScriptIncludes("@venture")